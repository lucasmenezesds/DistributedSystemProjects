#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'project_types'

module GraphOperations
  class Client
    include ::Thrift::Client

    def createVertex(vertexID, color, description, weight)
      send_createVertex(vertexID, color, description, weight)
      recv_createVertex()
    end

    def send_createVertex(vertexID, color, description, weight)
      send_message('createVertex', CreateVertex_args, :vertexID => vertexID, :color => color, :description => description, :weight => weight)
    end

    def recv_createVertex()
      result = receive_message(CreateVertex_result)
      raise result.invalidObjMsg unless result.invalidObjMsg.nil?
      raise result.opFailedMsg unless result.opFailedMsg.nil?
      return
    end

    def readVertex(vertexID)
      send_readVertex(vertexID)
      return recv_readVertex()
    end

    def send_readVertex(vertexID)
      send_message('readVertex', ReadVertex_args, :vertexID => vertexID)
    end

    def recv_readVertex()
      result = receive_message(ReadVertex_result)
      return result.success unless result.success.nil?
      raise result.objectNotFound unless result.objectNotFound.nil?
      raise result.opFailedMsg unless result.opFailedMsg.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'readVertex failed: unknown result')
    end

    def updateVertex(vertexID, color, description, weight)
      send_updateVertex(vertexID, color, description, weight)
      recv_updateVertex()
    end

    def send_updateVertex(vertexID, color, description, weight)
      send_message('updateVertex', UpdateVertex_args, :vertexID => vertexID, :color => color, :description => description, :weight => weight)
    end

    def recv_updateVertex()
      result = receive_message(UpdateVertex_result)
      raise result.objectNotFound unless result.objectNotFound.nil?
      raise result.opFailedMsg unless result.opFailedMsg.nil?
      raise result.invalidObjMsg unless result.invalidObjMsg.nil?
      return
    end

    def deleteVertex(vertexID)
      send_deleteVertex(vertexID)
      recv_deleteVertex()
    end

    def send_deleteVertex(vertexID)
      send_message('deleteVertex', DeleteVertex_args, :vertexID => vertexID)
    end

    def recv_deleteVertex()
      result = receive_message(DeleteVertex_result)
      raise result.objectNotFound unless result.objectNotFound.nil?
      raise result.opFailedMsg unless result.opFailedMsg.nil?
      raise result.invalidObjMsg unless result.invalidObjMsg.nil?
      return
    end

    def createEdge(edgeID, vertexA, vertexB, weight, flag, description)
      send_createEdge(edgeID, vertexA, vertexB, weight, flag, description)
      recv_createEdge()
    end

    def send_createEdge(edgeID, vertexA, vertexB, weight, flag, description)
      send_message('createEdge', CreateEdge_args, :edgeID => edgeID, :vertexA => vertexA, :vertexB => vertexB, :weight => weight, :flag => flag, :description => description)
    end

    def recv_createEdge()
      result = receive_message(CreateEdge_result)
      raise result.invalidObjMsg unless result.invalidObjMsg.nil?
      raise result.opFailedMsg unless result.opFailedMsg.nil?
      return
    end

    def readEdge(vertexID)
      send_readEdge(vertexID)
      return recv_readEdge()
    end

    def send_readEdge(vertexID)
      send_message('readEdge', ReadEdge_args, :vertexID => vertexID)
    end

    def recv_readEdge()
      result = receive_message(ReadEdge_result)
      return result.success unless result.success.nil?
      raise result.objectNotFound unless result.objectNotFound.nil?
      raise result.opFailedMsg unless result.opFailedMsg.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'readEdge failed: unknown result')
    end

    def updateEdge(edgeID, vertexA, vertexB, weight, flag, description)
      send_updateEdge(edgeID, vertexA, vertexB, weight, flag, description)
      recv_updateEdge()
    end

    def send_updateEdge(edgeID, vertexA, vertexB, weight, flag, description)
      send_message('updateEdge', UpdateEdge_args, :edgeID => edgeID, :vertexA => vertexA, :vertexB => vertexB, :weight => weight, :flag => flag, :description => description)
    end

    def recv_updateEdge()
      result = receive_message(UpdateEdge_result)
      raise result.objectNotFound unless result.objectNotFound.nil?
      raise result.opFailedMsg unless result.opFailedMsg.nil?
      raise result.invalidObjMsg unless result.invalidObjMsg.nil?
      return
    end

    def deleteEdge(edgeID)
      send_deleteEdge(edgeID)
      recv_deleteEdge()
    end

    def send_deleteEdge(edgeID)
      send_message('deleteEdge', DeleteEdge_args, :edgeID => edgeID)
    end

    def recv_deleteEdge()
      result = receive_message(DeleteEdge_result)
      raise result.objectNotFound unless result.objectNotFound.nil?
      raise result.opFailedMsg unless result.opFailedMsg.nil?
      raise result.invalidObjMsg unless result.invalidObjMsg.nil?
      return
    end

    def listVertexes(edge)
      send_listVertexes(edge)
      return recv_listVertexes()
    end

    def send_listVertexes(edge)
      send_message('listVertexes', ListVertexes_args, :edge => edge)
    end

    def recv_listVertexes()
      result = receive_message(ListVertexes_result)
      return result.success unless result.success.nil?
      raise result.invalidObjMsg unless result.invalidObjMsg.nil?
      raise result.opFailedMsg unless result.opFailedMsg.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'listVertexes failed: unknown result')
    end

    def listEdges(vertex)
      send_listEdges(vertex)
      return recv_listEdges()
    end

    def send_listEdges(vertex)
      send_message('listEdges', ListEdges_args, :vertex => vertex)
    end

    def recv_listEdges()
      result = receive_message(ListEdges_result)
      return result.success unless result.success.nil?
      raise result.invalidObjMsg unless result.invalidObjMsg.nil?
      raise result.opFailedMsg unless result.opFailedMsg.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'listEdges failed: unknown result')
    end

    def listNeighbourVertexes(vertex)
      send_listNeighbourVertexes(vertex)
      return recv_listNeighbourVertexes()
    end

    def send_listNeighbourVertexes(vertex)
      send_message('listNeighbourVertexes', ListNeighbourVertexes_args, :vertex => vertex)
    end

    def recv_listNeighbourVertexes()
      result = receive_message(ListNeighbourVertexes_result)
      return result.success unless result.success.nil?
      raise result.invalidObjMsg unless result.invalidObjMsg.nil?
      raise result.opFailedMsg unless result.opFailedMsg.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'listNeighbourVertexes failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_createVertex(seqid, iprot, oprot)
      args = read_args(iprot, CreateVertex_args)
      result = CreateVertex_result.new()
      begin
        @handler.createVertex(args.vertexID, args.color, args.description, args.weight)
      rescue ::InvalidObject => invalidObjMsg
        result.invalidObjMsg = invalidObjMsg
      rescue ::OperationHasFailed => opFailedMsg
        result.opFailedMsg = opFailedMsg
      end
      write_result(result, oprot, 'createVertex', seqid)
    end

    def process_readVertex(seqid, iprot, oprot)
      args = read_args(iprot, ReadVertex_args)
      result = ReadVertex_result.new()
      begin
        result.success = @handler.readVertex(args.vertexID)
      rescue ::CouldNotFindObject => objectNotFound
        result.objectNotFound = objectNotFound
      rescue ::OperationHasFailed => opFailedMsg
        result.opFailedMsg = opFailedMsg
      end
      write_result(result, oprot, 'readVertex', seqid)
    end

    def process_updateVertex(seqid, iprot, oprot)
      args = read_args(iprot, UpdateVertex_args)
      result = UpdateVertex_result.new()
      begin
        @handler.updateVertex(args.vertexID, args.color, args.description, args.weight)
      rescue ::CouldNotFindObject => objectNotFound
        result.objectNotFound = objectNotFound
      rescue ::OperationHasFailed => opFailedMsg
        result.opFailedMsg = opFailedMsg
      rescue ::InvalidObject => invalidObjMsg
        result.invalidObjMsg = invalidObjMsg
      end
      write_result(result, oprot, 'updateVertex', seqid)
    end

    def process_deleteVertex(seqid, iprot, oprot)
      args = read_args(iprot, DeleteVertex_args)
      result = DeleteVertex_result.new()
      begin
        @handler.deleteVertex(args.vertexID)
      rescue ::CouldNotFindObject => objectNotFound
        result.objectNotFound = objectNotFound
      rescue ::OperationHasFailed => opFailedMsg
        result.opFailedMsg = opFailedMsg
      rescue ::InvalidObject => invalidObjMsg
        result.invalidObjMsg = invalidObjMsg
      end
      write_result(result, oprot, 'deleteVertex', seqid)
    end

    def process_createEdge(seqid, iprot, oprot)
      args = read_args(iprot, CreateEdge_args)
      result = CreateEdge_result.new()
      begin
        @handler.createEdge(args.edgeID, args.vertexA, args.vertexB, args.weight, args.flag, args.description)
      rescue ::InvalidObject => invalidObjMsg
        result.invalidObjMsg = invalidObjMsg
      rescue ::OperationHasFailed => opFailedMsg
        result.opFailedMsg = opFailedMsg
      end
      write_result(result, oprot, 'createEdge', seqid)
    end

    def process_readEdge(seqid, iprot, oprot)
      args = read_args(iprot, ReadEdge_args)
      result = ReadEdge_result.new()
      begin
        result.success = @handler.readEdge(args.vertexID)
      rescue ::CouldNotFindObject => objectNotFound
        result.objectNotFound = objectNotFound
      rescue ::OperationHasFailed => opFailedMsg
        result.opFailedMsg = opFailedMsg
      end
      write_result(result, oprot, 'readEdge', seqid)
    end

    def process_updateEdge(seqid, iprot, oprot)
      args = read_args(iprot, UpdateEdge_args)
      result = UpdateEdge_result.new()
      begin
        @handler.updateEdge(args.edgeID, args.vertexA, args.vertexB, args.weight, args.flag, args.description)
      rescue ::CouldNotFindObject => objectNotFound
        result.objectNotFound = objectNotFound
      rescue ::OperationHasFailed => opFailedMsg
        result.opFailedMsg = opFailedMsg
      rescue ::InvalidObject => invalidObjMsg
        result.invalidObjMsg = invalidObjMsg
      end
      write_result(result, oprot, 'updateEdge', seqid)
    end

    def process_deleteEdge(seqid, iprot, oprot)
      args = read_args(iprot, DeleteEdge_args)
      result = DeleteEdge_result.new()
      begin
        @handler.deleteEdge(args.edgeID)
      rescue ::CouldNotFindObject => objectNotFound
        result.objectNotFound = objectNotFound
      rescue ::OperationHasFailed => opFailedMsg
        result.opFailedMsg = opFailedMsg
      rescue ::InvalidObject => invalidObjMsg
        result.invalidObjMsg = invalidObjMsg
      end
      write_result(result, oprot, 'deleteEdge', seqid)
    end

    def process_listVertexes(seqid, iprot, oprot)
      args = read_args(iprot, ListVertexes_args)
      result = ListVertexes_result.new()
      begin
        result.success = @handler.listVertexes(args.edge)
      rescue ::InvalidObject => invalidObjMsg
        result.invalidObjMsg = invalidObjMsg
      rescue ::OperationHasFailed => opFailedMsg
        result.opFailedMsg = opFailedMsg
      end
      write_result(result, oprot, 'listVertexes', seqid)
    end

    def process_listEdges(seqid, iprot, oprot)
      args = read_args(iprot, ListEdges_args)
      result = ListEdges_result.new()
      begin
        result.success = @handler.listEdges(args.vertex)
      rescue ::InvalidObject => invalidObjMsg
        result.invalidObjMsg = invalidObjMsg
      rescue ::OperationHasFailed => opFailedMsg
        result.opFailedMsg = opFailedMsg
      end
      write_result(result, oprot, 'listEdges', seqid)
    end

    def process_listNeighbourVertexes(seqid, iprot, oprot)
      args = read_args(iprot, ListNeighbourVertexes_args)
      result = ListNeighbourVertexes_result.new()
      begin
        result.success = @handler.listNeighbourVertexes(args.vertex)
      rescue ::InvalidObject => invalidObjMsg
        result.invalidObjMsg = invalidObjMsg
      rescue ::OperationHasFailed => opFailedMsg
        result.opFailedMsg = opFailedMsg
      end
      write_result(result, oprot, 'listNeighbourVertexes', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class CreateVertex_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERTEXID = 1
    COLOR = 2
    DESCRIPTION = 3
    WEIGHT = 4

    FIELDS = {
      VERTEXID => {:type => ::Thrift::Types::I64, :name => 'vertexID'},
      COLOR => {:type => ::Thrift::Types::I64, :name => 'color'},
      DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'},
      WEIGHT => {:type => ::Thrift::Types::DOUBLE, :name => 'weight'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateVertex_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INVALIDOBJMSG = 1
    OPFAILEDMSG = 2

    FIELDS = {
      INVALIDOBJMSG => {:type => ::Thrift::Types::STRUCT, :name => 'invalidObjMsg', :class => ::InvalidObject},
      OPFAILEDMSG => {:type => ::Thrift::Types::STRUCT, :name => 'opFailedMsg', :class => ::OperationHasFailed}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReadVertex_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERTEXID = 1

    FIELDS = {
      VERTEXID => {:type => ::Thrift::Types::I64, :name => 'vertexID'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReadVertex_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    OBJECTNOTFOUND = 1
    OPFAILEDMSG = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Vertex},
      OBJECTNOTFOUND => {:type => ::Thrift::Types::STRUCT, :name => 'objectNotFound', :class => ::CouldNotFindObject},
      OPFAILEDMSG => {:type => ::Thrift::Types::STRUCT, :name => 'opFailedMsg', :class => ::OperationHasFailed}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateVertex_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERTEXID = 1
    COLOR = 2
    DESCRIPTION = 3
    WEIGHT = 4

    FIELDS = {
      VERTEXID => {:type => ::Thrift::Types::I64, :name => 'vertexID'},
      COLOR => {:type => ::Thrift::Types::I64, :name => 'color'},
      DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'},
      WEIGHT => {:type => ::Thrift::Types::DOUBLE, :name => 'weight'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateVertex_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OBJECTNOTFOUND = 1
    OPFAILEDMSG = 2
    INVALIDOBJMSG = 3

    FIELDS = {
      OBJECTNOTFOUND => {:type => ::Thrift::Types::STRUCT, :name => 'objectNotFound', :class => ::CouldNotFindObject},
      OPFAILEDMSG => {:type => ::Thrift::Types::STRUCT, :name => 'opFailedMsg', :class => ::OperationHasFailed},
      INVALIDOBJMSG => {:type => ::Thrift::Types::STRUCT, :name => 'invalidObjMsg', :class => ::InvalidObject}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteVertex_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERTEXID = 1

    FIELDS = {
      VERTEXID => {:type => ::Thrift::Types::I64, :name => 'vertexID'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteVertex_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OBJECTNOTFOUND = 1
    OPFAILEDMSG = 2
    INVALIDOBJMSG = 3

    FIELDS = {
      OBJECTNOTFOUND => {:type => ::Thrift::Types::STRUCT, :name => 'objectNotFound', :class => ::CouldNotFindObject},
      OPFAILEDMSG => {:type => ::Thrift::Types::STRUCT, :name => 'opFailedMsg', :class => ::OperationHasFailed},
      INVALIDOBJMSG => {:type => ::Thrift::Types::STRUCT, :name => 'invalidObjMsg', :class => ::InvalidObject}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateEdge_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EDGEID = 1
    VERTEXA = 2
    VERTEXB = 3
    WEIGHT = 4
    FLAG = 5
    DESCRIPTION = 6

    FIELDS = {
      EDGEID => {:type => ::Thrift::Types::I64, :name => 'edgeID'},
      VERTEXA => {:type => ::Thrift::Types::I64, :name => 'vertexA'},
      VERTEXB => {:type => ::Thrift::Types::I64, :name => 'vertexB'},
      WEIGHT => {:type => ::Thrift::Types::I64, :name => 'weight'},
      FLAG => {:type => ::Thrift::Types::I32, :name => 'flag'},
      DESCRIPTION => {:type => ::Thrift::Types::I64, :name => 'description'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateEdge_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INVALIDOBJMSG = 1
    OPFAILEDMSG = 2

    FIELDS = {
      INVALIDOBJMSG => {:type => ::Thrift::Types::STRUCT, :name => 'invalidObjMsg', :class => ::InvalidObject},
      OPFAILEDMSG => {:type => ::Thrift::Types::STRUCT, :name => 'opFailedMsg', :class => ::OperationHasFailed}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReadEdge_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERTEXID = 1

    FIELDS = {
      VERTEXID => {:type => ::Thrift::Types::I64, :name => 'vertexID'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReadEdge_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    OBJECTNOTFOUND = 1
    OPFAILEDMSG = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Edge},
      OBJECTNOTFOUND => {:type => ::Thrift::Types::STRUCT, :name => 'objectNotFound', :class => ::CouldNotFindObject},
      OPFAILEDMSG => {:type => ::Thrift::Types::STRUCT, :name => 'opFailedMsg', :class => ::OperationHasFailed}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateEdge_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EDGEID = 1
    VERTEXA = 2
    VERTEXB = 3
    WEIGHT = 4
    FLAG = 5
    DESCRIPTION = 6

    FIELDS = {
      EDGEID => {:type => ::Thrift::Types::I64, :name => 'edgeID'},
      VERTEXA => {:type => ::Thrift::Types::I64, :name => 'vertexA'},
      VERTEXB => {:type => ::Thrift::Types::I64, :name => 'vertexB'},
      WEIGHT => {:type => ::Thrift::Types::DOUBLE, :name => 'weight'},
      FLAG => {:type => ::Thrift::Types::I32, :name => 'flag'},
      DESCRIPTION => {:type => ::Thrift::Types::I64, :name => 'description'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateEdge_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OBJECTNOTFOUND = 1
    OPFAILEDMSG = 2
    INVALIDOBJMSG = 3

    FIELDS = {
      OBJECTNOTFOUND => {:type => ::Thrift::Types::STRUCT, :name => 'objectNotFound', :class => ::CouldNotFindObject},
      OPFAILEDMSG => {:type => ::Thrift::Types::STRUCT, :name => 'opFailedMsg', :class => ::OperationHasFailed},
      INVALIDOBJMSG => {:type => ::Thrift::Types::STRUCT, :name => 'invalidObjMsg', :class => ::InvalidObject}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteEdge_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EDGEID = 1

    FIELDS = {
      EDGEID => {:type => ::Thrift::Types::I64, :name => 'edgeID'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteEdge_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OBJECTNOTFOUND = 1
    OPFAILEDMSG = 2
    INVALIDOBJMSG = 3

    FIELDS = {
      OBJECTNOTFOUND => {:type => ::Thrift::Types::STRUCT, :name => 'objectNotFound', :class => ::CouldNotFindObject},
      OPFAILEDMSG => {:type => ::Thrift::Types::STRUCT, :name => 'opFailedMsg', :class => ::OperationHasFailed},
      INVALIDOBJMSG => {:type => ::Thrift::Types::STRUCT, :name => 'invalidObjMsg', :class => ::InvalidObject}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ListVertexes_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EDGE = 1

    FIELDS = {
      EDGE => {:type => ::Thrift::Types::I64, :name => 'edge'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ListVertexes_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    INVALIDOBJMSG = 1
    OPFAILEDMSG = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Vertex}},
      INVALIDOBJMSG => {:type => ::Thrift::Types::STRUCT, :name => 'invalidObjMsg', :class => ::InvalidObject},
      OPFAILEDMSG => {:type => ::Thrift::Types::STRUCT, :name => 'opFailedMsg', :class => ::OperationHasFailed}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ListEdges_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERTEX = 1

    FIELDS = {
      VERTEX => {:type => ::Thrift::Types::I64, :name => 'vertex'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ListEdges_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    INVALIDOBJMSG = 1
    OPFAILEDMSG = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Edge}},
      INVALIDOBJMSG => {:type => ::Thrift::Types::STRUCT, :name => 'invalidObjMsg', :class => ::InvalidObject},
      OPFAILEDMSG => {:type => ::Thrift::Types::STRUCT, :name => 'opFailedMsg', :class => ::OperationHasFailed}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ListNeighbourVertexes_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERTEX = 1

    FIELDS = {
      VERTEX => {:type => ::Thrift::Types::I64, :name => 'vertex'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ListNeighbourVertexes_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    INVALIDOBJMSG = 1
    OPFAILEDMSG = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Vertex}},
      INVALIDOBJMSG => {:type => ::Thrift::Types::STRUCT, :name => 'invalidObjMsg', :class => ::InvalidObject},
      OPFAILEDMSG => {:type => ::Thrift::Types::STRUCT, :name => 'opFailedMsg', :class => ::OperationHasFailed}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

