#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

class CouldNotFindObject < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.msg = message
  end

  def message; msg end

  MSG = 1

  FIELDS = {
    MSG => {:type => ::Thrift::Types::STRING, :name => 'msg'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class OperationHasFailed < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.msg = message
  end

  def message; msg end

  MSG = 1

  FIELDS = {
    MSG => {:type => ::Thrift::Types::STRING, :name => 'msg'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class InvalidObject < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.msg = message
  end

  def message; msg end

  MSG = 1

  FIELDS = {
    MSG => {:type => ::Thrift::Types::STRING, :name => 'msg'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Edge
  include ::Thrift::Struct, ::Thrift::Struct_Union
  EDGEID = 1
  VERTEXA = 2
  VERTEXB = 3
  WEIGHT = 4
  FLAG = 5
  DESCRIPTION = 6

  FIELDS = {
    EDGEID => {:type => ::Thrift::Types::I64, :name => 'edgeID'},
    VERTEXA => {:type => ::Thrift::Types::I64, :name => 'vertexA'},
    VERTEXB => {:type => ::Thrift::Types::I64, :name => 'vertexB'},
    WEIGHT => {:type => ::Thrift::Types::DOUBLE, :name => 'weight'},
    FLAG => {:type => ::Thrift::Types::I32, :name => 'flag'},
    DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field edgeID is unset!') unless @edgeID
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field vertexA is unset!') unless @vertexA
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field vertexB is unset!') unless @vertexB
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field weight is unset!') unless @weight
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field flag is unset!') unless @flag
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field description is unset!') unless @description
  end

  ::Thrift::Struct.generate_accessors self
end

class Vertex
  include ::Thrift::Struct, ::Thrift::Struct_Union
  VERTEXID = 1
  COLOR = 2
  DESCRIPTION = 3
  WEIGHT = 4
  EDGES = 5

  FIELDS = {
    VERTEXID => {:type => ::Thrift::Types::I64, :name => 'vertexID'},
    COLOR => {:type => ::Thrift::Types::I64, :name => 'color'},
    DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'},
    WEIGHT => {:type => ::Thrift::Types::DOUBLE, :name => 'weight'},
    EDGES => {:type => ::Thrift::Types::LIST, :name => 'edges', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Edge}}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field vertexID is unset!') unless @vertexID
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field color is unset!') unless @color
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field description is unset!') unless @description
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field weight is unset!') unless @weight
  end

  ::Thrift::Struct.generate_accessors self
end

class Graph
  include ::Thrift::Struct, ::Thrift::Struct_Union
  GRAPHID = 1
  LIST_OF_VERTEXES = 2
  LIST_OF_EDGES = 3

  FIELDS = {
    GRAPHID => {:type => ::Thrift::Types::I64, :name => 'graphID'},
    LIST_OF_VERTEXES => {:type => ::Thrift::Types::SET, :name => 'list_of_vertexes', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Vertex}},
    LIST_OF_EDGES => {:type => ::Thrift::Types::SET, :name => 'list_of_edges', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Edge}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

